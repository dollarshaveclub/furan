// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dollarshaveclub/furan/lib/github_fetch (interfaces: CodeFetcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	ddtrace "gopkg.in/DataDog/dd-trace-go.v1/ddtrace"
	io "io"
	reflect "reflect"
)

// MockCodeFetcher is a mock of CodeFetcher interface
type MockCodeFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockCodeFetcherMockRecorder
}

// MockCodeFetcherMockRecorder is the mock recorder for MockCodeFetcher
type MockCodeFetcherMockRecorder struct {
	mock *MockCodeFetcher
}

// NewMockCodeFetcher creates a new mock instance
func NewMockCodeFetcher(ctrl *gomock.Controller) *MockCodeFetcher {
	mock := &MockCodeFetcher{ctrl: ctrl}
	mock.recorder = &MockCodeFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeFetcher) EXPECT() *MockCodeFetcherMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCodeFetcher) Get(arg0 ddtrace.Span, arg1, arg2, arg3 string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCodeFetcherMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCodeFetcher)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetCommitSHA mocks base method
func (m *MockCodeFetcher) GetCommitSHA(arg0 ddtrace.Span, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitSHA", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitSHA indicates an expected call of GetCommitSHA
func (mr *MockCodeFetcherMockRecorder) GetCommitSHA(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitSHA", reflect.TypeOf((*MockCodeFetcher)(nil).GetCommitSHA), arg0, arg1, arg2, arg3)
}
