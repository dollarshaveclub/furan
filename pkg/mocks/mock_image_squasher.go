// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dollarshaveclub/furan/lib/squasher (interfaces: ImageSquasher)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	squasher "github.com/dollarshaveclub/furan/pkg/squasher"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockImageSquasher is a mock of ImageSquasher interface
type MockImageSquasher struct {
	ctrl     *gomock.Controller
	recorder *MockImageSquasherMockRecorder
}

// MockImageSquasherMockRecorder is the mock recorder for MockImageSquasher
type MockImageSquasherMockRecorder struct {
	mock *MockImageSquasher
}

// NewMockImageSquasher creates a new mock instance
func NewMockImageSquasher(ctrl *gomock.Controller) *MockImageSquasher {
	mock := &MockImageSquasher{ctrl: ctrl}
	mock.recorder = &MockImageSquasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageSquasher) EXPECT() *MockImageSquasherMockRecorder {
	return m.recorder
}

// Squash mocks base method
func (m *MockImageSquasher) Squash(arg0 context.Context, arg1 io.Reader, arg2 io.Writer) (*squasher.SquashInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Squash", arg0, arg1, arg2)
	ret0, _ := ret[0].(*squasher.SquashInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Squash indicates an expected call of Squash
func (mr *MockImageSquasherMockRecorder) Squash(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Squash", reflect.TypeOf((*MockImageSquasher)(nil).Squash), arg0, arg1, arg2)
}
