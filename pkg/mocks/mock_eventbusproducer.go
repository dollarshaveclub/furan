// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dollarshaveclub/furan/lib/kafka (interfaces: EventBusProducer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	"github.com/dollarshaveclub/furan/pkg/generated/furanrpc"
	gomock "github.com/golang/mock/gomock"
)

// MockEventBusProducer is a mock of EventBusProducer interface
type MockEventBusProducer struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusProducerMockRecorder
}

// MockEventBusProducerMockRecorder is the mock recorder for MockEventBusProducer
type MockEventBusProducerMockRecorder struct {
	mock *MockEventBusProducer
}

// NewMockEventBusProducer creates a new mock instance
func NewMockEventBusProducer(ctrl *gomock.Controller) *MockEventBusProducer {
	mock := &MockEventBusProducer{ctrl: ctrl}
	mock.recorder = &MockEventBusProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventBusProducer) EXPECT() *MockEventBusProducerMockRecorder {
	return m.recorder
}

// PublishEvent mocks base method
func (m *MockEventBusProducer) PublishEvent(arg0 *furanrpc.BuildEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent
func (mr *MockEventBusProducerMockRecorder) PublishEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockEventBusProducer)(nil).PublishEvent), arg0)
}
