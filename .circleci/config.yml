version: 2.1
orbs:
  kubernetes: circleci/kubernetes@0.11.2
  helm: circleci/helm@1.2.0

jobs:
  build:
    docker:
      - image: circleci/golang:1.15
      - image: circleci/postgres:12-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: postgres

    working_directory: /go/src/github.com/dollarshaveclub/furan
    steps:
      - checkout

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: go mod vendor
      - run:
          name: Run vet
          command: go vet ./...
      - run:
          name: Run tests
          working_directory: ./pkg
          environment:
            FURAN_TEST_DB: postgresql://postgres:root@localhost:5432/postgres?sslmode=disable
          command: go test -coverprofile=profile.cov ./...
      - run:
          name: Test coverage
          working_directory: ./pkg
          command: go tool cover -func profile.cov |grep total |awk '{ print $3 }'

  integration_test:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      K8S_VERSION: v1.19.6
      MINIKUBE_VERSION: v1.16.0
    steps:
      - checkout

      # Build docker image (do this first so if it fails we don't bother w/ anything else)
      - run:
          name: build docker image
          command: docker build -t furan2:integration .
          environment:
            DOCKER_BUILDKIT: 1

      # Set up local k8s
      - kubernetes/install-kubectl
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: setup conntrack
          command: sudo apt update && sudo apt-get install -y conntrack
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --kubernetes-version=${K8S_VERSION}
      - run:
          name: fix permissions
          command: |
            sudo chown -R circleci /home/circleci/.minikube/ &&
            sudo chown -R circleci /home/circleci/.kube/
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default

      # Install helm chart
      - helm/install-helm-chart:
          chart: ./.helm/charts/furan2-integration
          helm-version: v3.4.2
          release-name: furan2-integration

      - run:
          name: wait for job completion
          command: |
            until [[ $SECONDS -gt 600 ]] || \
            [[ $(kubectl get jobs furan2-integration -o jsonpath='{.status.conditions[?(@.type=="Failed")].status}') == "True" ]] || \
            [[ $(kubectl get jobs furan2-integration -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}') == "True" ]]; \
            do
              echo "waiting for job completion..."
            done
            success=$(kubectl get jobs furan2-integration -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}');
            if [[ "${success}" == "True" ]]; then
              echo "job success"
              exit 0
            else
              echo "job failed or timeout"
              kubectl describe job/furan2-integration
              kubectl logs job/furan2-integration
              exit 1
            fi
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - integration_test
